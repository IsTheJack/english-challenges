{"version":3,"sources":["helpers/getRandomSentence.js","components/AppTemplate.js","App.js","serviceWorker.js","index.js"],"names":["getRandomSentence","sentences","collectionSize","length","Math","floor","random","theme","createMuiTheme","AppTemplate","children","React","useState","pageIndex","setPageIndex","ThemeProvider","CssBaseline","className","Box","BottomNavigation","value","onChange","_","newValue","showLabels","BottomNavigationAction","label","icon","Restore","Favorite","reviewLogic","App","undefined","randomWord","setRandomWord","randomWordToReview","setRandomWordToReview","studiedWords","setStudiedWords","isReviewMode","setIsReviewMode","studiedWordsNames","map","studiedWord","word","availableWords","difference","words","wordsToReview","index","studiedWordsIndexItem","filter","firstStudyDate","logicIndex","daysToAdd","moment","add","isSameOrBefore","events","ts","toISOString","text","changeRandomSentence","changeRandomWordToReview","useEffect","studiedWordsKey","localStorage","setItem","JSON","stringify","getItem","parse","AppBar","position","Toolbar","variant","Typography","color","Button","onClick","size","href","target","rel","startIcon","Done","Date","now","get","Fab","wordObj","wordIndex","newStudiedWordsObj","cloneDeep","reviewWord","aria-label","ThumbUp","resetReviewWord","ThumbDown","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0ff364b.chunk.js","sourcesContent":["export default function getRandomSentence(sentences) {\n    const collectionSize = sentences.length\n    // NOTE temporary solution\n    return sentences[Math.floor(Math.random() * collectionSize)]\n}\n","import React from 'react'\n\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport {\n  CssBaseline,\n  BottomNavigation,\n  BottomNavigationAction,\n  Box\n} from \"@material-ui/core\";\nimport {\n  Restore as RestoreIcon,\n  Favorite as FavoriteIcon,\n} from '@material-ui/icons'\n\n\nimport './styles/AppTemplate.css'\n\nconst theme = createMuiTheme({});\n\nconst AppTemplate = ({ children }) => {\n  const [pageIndex, setPageIndex] = React.useState(0)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"app-template\">\n        <Box className=\"app-template__body\">{children && children(pageIndex)}</Box>\n        <footer>\n          <BottomNavigation\n            value={pageIndex}\n            onChange={(_, newValue) => {\n              setPageIndex(newValue);\n            }}\n            showLabels\n            // className={classes.root}\n          >\n            <BottomNavigationAction label=\"HOME\" icon={<RestoreIcon />} />\n            <BottomNavigationAction label=\"HISTORY\" icon={<FavoriteIcon />} />\n          </BottomNavigation>\n        </footer>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default AppTemplate;\n","import React from 'react';\nimport Timeline from \"react-time-line\";\nimport moment from 'moment'\n\nimport { Button, AppBar, Typography, Toolbar, Fab } from \"@material-ui/core\";\nimport { Done as DoneIcon, ThumbDown, ThumbUp } from \"@material-ui/icons\";\n\nimport './App.css';\n\nimport getRandomSentence from './helpers/getRandomSentence'\nimport words from './assets/json/words.json'\n\nimport { difference, get, cloneDeep } from \"lodash\";\nimport AppTemplate from './components/AppTemplate';\n\nconst reviewLogic = [0, 1, 3, 7, 15, 30, 45, 60, 90, 120, 365, 546, 720]\n\nfunction App() {\n  const [randomWord, setRandomWord] = React.useState(undefined)\n  const [randomWordToReview, setRandomWordToReview] = React.useState(undefined)\n  const [studiedWords, setStudiedWords] = React.useState([])\n  const [isReviewMode, setIsReviewMode] = React.useState(false)\n  const studiedWordsNames = studiedWords.map(studiedWord => studiedWord.word)\n  const availableWords = difference(words, studiedWordsNames)\n\n  const getWordsToReview = () => {\n    // Filtrar as palavras estudadas\n    // Comparar a data de primeiro estudo usando a l처gica de revis찾o com a data atual\n    // - Data de primeiro estudo + l처gica de revis찾o (em dias) tem que ser menor que a data atual\n\n    // Retornar todas as palavras que respeitem essa regra\n\n    return studiedWords\n      .map((studiedWord, index) => ({ ...studiedWord, studiedWordsIndexItem: index }))\n      .filter(studiedWord => {\n        const { firstStudyDate, logicIndex } = studiedWord;\n        const daysToAdd = reviewLogic[logicIndex];\n\n        const dateToReview = moment(firstStudyDate).add(daysToAdd, \"days\");\n\n        const shouldReview = dateToReview.isSameOrBefore(moment(), \"days\");\n\n        return shouldReview;\n      });\n  }\n\n  const wordsToReview = getWordsToReview()\n\n  // ts and text\n  const events = studiedWords.map(studiedWord => ({\n    ts: moment(studiedWord.firstStudyDate).toISOString(),\n    text: studiedWord.word\n  }));\n\n  const changeRandomSentence = () => {\n    setRandomWord(getRandomSentence(availableWords))\n  }\n\n  const changeRandomWordToReview = () => {\n    setRandomWordToReview(getRandomSentence(wordsToReview));\n  }\n\n  const checkWordAsStudied = (word) => {\n    setStudiedWords([...studiedWords, {\n      word,\n      logicIndex: 0,\n      firstStudyDate: Date.now(),\n    }])\n    setRandomWord(undefined)\n  }\n\n  React.useEffect(() => {\n    const studiedWordsKey = 'english-challenges::studiedWords'\n\n    if (studiedWords.length > 0) {\n      return localStorage.setItem(studiedWordsKey, JSON.stringify(studiedWords))\n    }\n\n    const hasStudiedInLocalStorage = !!localStorage.getItem(studiedWordsKey)\n\n    if (hasStudiedInLocalStorage) {\n      return setStudiedWords(JSON.parse(localStorage.getItem(studiedWordsKey)))\n    }\n  }, [studiedWords])\n\n  React.useEffect(() => {\n    if (!wordsToReview.length) {\n      setIsReviewMode(false)\n    } else {\n      changeRandomWordToReview()\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [wordsToReview.length]);\n\n  const reviewWord = (wordObj) => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex += 1;\n\n    setStudiedWords(newStudiedWordsObj);\n  }\n\n  const resetReviewWord = wordObj => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex = 0;\n\n    setStudiedWords(newStudiedWordsObj);\n    changeRandomWordToReview();\n  };\n\n  return (\n    <AppTemplate>\n      {(pageIndex) => {\n        return (\n          <div className=\"app__body\">\n            <AppBar position=\"fixed\">\n              <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" color=\"inherit\">\n                  {pageIndex === 0 ? \"Home\" : \"History\"}\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            <Toolbar />\n            {pageIndex === 0 && (\n              <div className=\"app__home-container\">\n                {!!availableWords.length && !isReviewMode && (\n                  <>\n                    <div className=\"app__main-actions-container\">\n                      <Button\n                        onClick={changeRandomSentence}\n                        color=\"primary\"\n                        variant=\"contained\"\n                        size=\"large\"\n                      >\n                        Get Random Word\n                      </Button>\n\n                      {!!wordsToReview.length && (\n                        <Button\n                          onClick={() => {\n                            setIsReviewMode(true);\n                            changeRandomWordToReview();\n                          }}\n                          color=\"secondary\"\n                          variant=\"contained\"\n                          size=\"large\"\n                        >\n                          Review ({wordsToReview.length})\n                        </Button>\n                      )}\n                    </div>\n\n                    <h1 className=\"app__current-word\">{randomWord}</h1>\n\n                    {randomWord && (\n                      <div className=\"app__work-actions\">\n                        <div className=\"app__services-links\">\n                          <Button\n                            className=\"link\"\n                            href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${randomWord}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            variant=\"contained\"\n                          >\n                            See google translate\n                          </Button>\n\n                          <Button\n                            className=\"link\"\n                            href={`https://context.reverso.net/traducao/ingles-portugues/${randomWord}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            variant=\"contained\"\n                          >\n                            See Reverso definitions\n                          </Button>\n\n                          <Button\n                            className=\"link\"\n                            href={`https://www.wordreference.com/enpt/${randomWord}`}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            variant=\"contained\"\n                          >\n                            See Word Reference definitions\n                          </Button>\n                        </div>\n\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          size=\"large\"\n                          startIcon={<DoneIcon />}\n                          onClick={() => checkWordAsStudied(randomWord)}\n                        >\n                          Mark as studied\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                {!!wordsToReview.length && isReviewMode && (\n                  <div className=\"main-column\">\n                    <h1 className=\"app__current-word\">\n                      {get(randomWordToReview, \"word\")}\n                    </h1>\n\n                    {get(randomWordToReview, \"word\") && (\n                      <>\n                        <div className=\"app__services-links\">\n                          <div className=\"app__services-links\">\n                            <Button\n                              className=\"link\"\n                              href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${get(\n                                randomWordToReview,\n                                \"word\"\n                              )}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              variant=\"contained\"\n                            >\n                              See google translate\n                            </Button>\n\n                            <Button\n                              className=\"link\"\n                              href={`https://context.reverso.net/traducao/ingles-portugues/${get(\n                                randomWordToReview,\n                                \"word\"\n                              )}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              variant=\"contained\"\n                            >\n                              See Reverso definitions\n                            </Button>\n\n                            <Button\n                              className=\"link\"\n                              href={`https://www.wordreference.com/enpt/${get(\n                                randomWordToReview,\n                                \"word\"\n                              )}`}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              variant=\"contained\"\n                            >\n                              See Word Reference definitions\n                            </Button>\n                          </div>\n                        </div>\n\n                        <div className=\"app__review-buttons-container\">\n                          <Fab\n                            onClick={() => reviewWord(randomWordToReview)}\n                            color=\"primary\"\n                            aria-label=\"add\"\n                            className=\"app__review-buttons\"\n                          >\n                            <ThumbUp />\n                          </Fab>\n\n                          <Fab\n                            onClick={() => resetReviewWord(randomWordToReview)}\n                            color=\"secondary\"\n                            aria-label=\"add\"\n                            className=\"app__review-buttons\"\n                          >\n                            <ThumbDown />\n                          </Fab>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                {!availableWords.length && (\n                  <>\n                    <h1>Congratulations!</h1>\n                    <h2>You finished the challenge</h2>\n                  </>\n                )}\n              </div>\n            )}\n            {pageIndex === 1 && (\n              <div>\n                <div>\n                  <Timeline items={events} />\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </AppTemplate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './components/AppTemplate';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}