{"version":3,"sources":["helpers/getRandomSentence.js","components/AppTemplate.js","App.js","serviceWorker.js","index.js"],"names":["getRandomSentence","sentences","collectionSize","length","Math","floor","random","theme","createMuiTheme","AppTemplate","children","React","useState","pageIndex","setPageIndex","ThemeProvider","CssBaseline","className","Box","BottomNavigation","value","onChange","_","newValue","showLabels","BottomNavigationAction","label","icon","Restore","Favorite","reviewLogic","App","undefined","randomWord","setRandomWord","randomWordToReview","setRandomWordToReview","studiedWords","setStudiedWords","isReviewMode","setIsReviewMode","isExampleModalOpened","setIsExampleModalOpened","navigator","onLine","isOnline","setIsOnline","studiedWordsNames","map","studiedWord","word","availableWords","difference","words","handleConnection","useEffect","window","addEventListener","wordsToReview","index","studiedWordsIndexItem","filter","firstStudyDate","logicIndex","daysToAdd","moment","add","isSameOrBefore","events","sort","a","b","ts","toISOString","text","changeRandomSentence","changeRandomWordToReview","studiedWordsKey","localStorage","setItem","JSON","stringify","getItem","parse","AppBar","position","Toolbar","variant","Typography","color","Button","onClick","size","wordsDefinitions","wordTypes","type","Chip","href","target","rel","startIcon","Done","Date","now","get","Fab","wordObj","wordIndex","newStudiedWordsObj","cloneDeep","reviewWord","aria-label","ThumbUp","resetReviewWord","ThumbDown","Modal","aria-labelledby","aria-describedby","open","onClose","Close","phrases","i","originalPhrase","translatedPhrase","ExpansionPanel","key","ExpansionPanelSummary","expandIcon","ExpandMore","aria-controls","id","dangerouslySetInnerHTML","__html","ExpansionPanelDetails","items","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2+/kRAAe,SAASA,EAAkBC,GACtC,IAAMC,EAAiBD,EAAUE,OAEjC,OAAOF,EAAUG,KAAKC,MAAMD,KAAKE,SAAWJ,I,8FCe1CK,G,MAAQC,YAAe,KA4BdC,EA1BK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACFC,IAAMC,SAAS,GADb,mBAC7BC,EAD6B,KAClBC,EADkB,KAGpC,OACE,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GACpB,kBAACS,EAAA,EAAD,MACA,yBAAKC,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAKD,UAAU,sBAAsBP,GAAYA,EAASG,IAC1D,gCACE,kBAACM,EAAA,EAAD,CACEC,MAAOP,EACPQ,SAAU,SAACC,EAAGC,GACZT,EAAaS,IAEfC,YAAU,GAGV,kBAACC,EAAA,EAAD,CAAwBC,MAAM,OAAOC,KAAM,kBAACC,EAAA,EAAD,QAC3C,kBAACH,EAAA,EAAD,CAAwBC,MAAM,UAAUC,KAAM,kBAACE,EAAA,EAAD,aCJpDC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KAgXrDC,MA9Wf,WAAgB,IAAD,EACuBpB,IAAMC,cAASoB,GADtC,mBACNC,EADM,KACMC,EADN,OAEuCvB,IAAMC,cAASoB,GAFtD,mBAENG,EAFM,KAEcC,EAFd,OAG2BzB,IAAMC,SAAS,IAH1C,mBAGNyB,EAHM,KAGQC,EAHR,OAI2B3B,IAAMC,UAAS,GAJ1C,mBAIN2B,EAJM,KAIQC,EAJR,OAK2C7B,IAAMC,UAAS,GAL1D,mBAKN6B,EALM,KAKgBC,EALhB,OAMmB/B,IAAMC,WAAW+B,UAAUC,QAN9C,mBAMNC,EANM,KAMIC,EANJ,KAOPC,EAAoBV,EAAaW,KAAI,SAAAC,GAAW,OAAIA,EAAYC,QAChEC,EAAiBC,qBAAWC,EAAON,GAEnCO,EAAmB,WACvB,OAAOR,IAAcH,UAAUC,SAGjCjC,IAAM4C,WAAU,WACdC,OAAOC,iBAAiB,SAAUH,GAClCE,OAAOC,iBAAiB,UAAWH,KAClC,IAEH,IAeMI,GAdGrB,EACJW,KAAI,SAACC,EAAaU,GAAd,sBAA8BV,EAA9B,CAA2CW,sBAAuBD,OACtEE,QAAO,SAAAZ,GAAgB,IACda,EAA+Bb,EAA/Ba,eAAgBC,EAAed,EAAfc,WAClBC,EAAYlC,EAAYiC,GAM9B,OAJqBE,IAAOH,GAAgBI,IAAIF,EAAW,QAEzBG,eAAeF,MAAU,WAS3DG,GAAS,YAAI/B,GAChBgC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAET,eAAiBQ,EAAER,kBACpCd,KAAI,SAAAC,GAAW,MAAK,CACnBuB,GAAIP,IAAOhB,EAAYa,gBAAgBW,cACvCC,KAAMzB,EAAYC,SAGhByB,GAAuB,WAC3BzC,EAAclC,EAAkBmD,KAG5ByB,GAA2B,WAC/BxC,EAAsBpC,EAAkB0D,MAuD1C,OA3CA/C,IAAM4C,WAAU,WACd,IAAMsB,EAAkB,mCAExB,OAAIxC,EAAalC,OAAS,EACjB2E,aAAaC,QAAQF,EAAiBG,KAAKC,UAAU5C,MAG3ByC,aAAaI,QAAQL,GAG/CvC,EAAgB0C,KAAKG,MAAML,aAAaI,QAAQL,UADzD,IAGC,CAACxC,IAEJ1B,IAAM4C,WAAU,WACTG,GAAcvD,OAGRoC,GACTqC,MAHApC,GAAgB,GAChBJ,OAAsBJ,MAKvB,CAAC0B,GAAcvD,SAsBhB,kBAAC,EAAD,MACG,SAACU,GAAe,IAAD,IACd,OACE,yBAAKI,UAAU,aACb,kBAACmE,EAAA,EAAD,CAAQC,SAAS,SACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACf,kBAACC,EAAA,EAAD,CAAYD,QAAQ,KAAKE,MAAM,WACd,IAAd5E,EAAkB,OAAS,aAIlC,kBAACyE,EAAA,EAAD,MACe,IAAdzE,GACC,yBAAKI,UAAU,yBACVkC,EAAehD,SAAWoC,GAC3B,oCACE,yBAAKtB,UAAU,+BACb,kBAACyE,EAAA,EAAD,CACEC,QAAShB,GACTc,MAAM,UACNF,QAAQ,YACRK,KAAK,SAJP,qBASGlC,GAAcvD,QACf,kBAACuF,EAAA,EAAD,CACEC,QAAS,WACPnD,GAAgB,GAChBoC,MAEFa,MAAM,YACNF,QAAQ,YACRK,KAAK,SAPP,WASWlC,GAAcvD,OATzB,MAcJ,wBAAIc,UAAU,qBAAqBgB,GAEnC,6BACE,yBAAKhB,UAAU,qBACX,UAAA4E,EAAiB5D,UAAjB,eAA8B6D,YAAa,IAAI9C,KAAI,SAAA+C,GAAI,OACvD,kBAACC,EAAA,EAAD,CAAMtE,MAAOqE,EAAMR,QAAQ,kBAKhCtD,GACC,yBAAKhB,UAAU,qBACb,yBAAKA,UAAU,uBACb,kBAACyE,EAAA,EAAD,CACEzE,UAAU,OACV0E,QAAS,kBAAMjD,GAAwB,IACvC6C,QAAQ,aAHV,gBAQC1C,GACC,oCACE,kBAAC6C,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,gFAA2EhE,GAC/EiE,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aALV,wBAUA,kBAACG,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,gEAA2DhE,GAC/DiE,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aALV,2BAUA,kBAACG,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,6CAAwChE,GAC5CiE,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aALV,oCAaN,kBAACG,EAAA,EAAD,CACEH,QAAQ,YACRE,MAAM,UACNG,KAAK,QACLQ,UAAW,kBAACC,EAAA,EAAD,MACXV,QAAS,kBA3JLzC,EA2J8BjB,EA1JxDK,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,CAChCa,OACAa,WAAY,EACZD,eAAgBwC,KAAKC,eAEvBrE,OAAcF,GANW,IAACkB,IAsJN,uBAcLQ,GAAcvD,QAAUoC,GACzB,yBAAKtB,UAAU,eACb,wBAAIA,UAAU,qBACXuF,cAAIrE,EAAoB,SAG1BqE,cAAIrE,EAAoB,SACvB,oCACE,yBAAKlB,UAAU,uBACb,yBAAKA,UAAU,uBACb,kBAACyE,EAAA,EAAD,CACEzE,UAAU,OACV0E,QAAS,kBAAMjD,GAAwB,IACvC6C,QAAQ,aAHV,gBAQC1C,GACC,oCACE,kBAAC6C,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,gFAA2EO,cAC7ErE,EACA,SAEF+D,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aARV,wBAaA,kBAACG,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,gEAA2DO,cAC7DrE,EACA,SAEF+D,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aARV,2BAaA,kBAACG,EAAA,EAAD,CACEzE,UAAU,OACVgF,KAAI,6CAAwCO,cAC1CrE,EACA,SAEF+D,OAAO,SACPC,IAAI,sBACJZ,QAAQ,aARV,qCAiBR,yBAAKtE,UAAU,iCACb,kBAACwF,EAAA,EAAD,CACEd,QAAS,kBApMhB,SAACe,GAClB,IAAMC,EAAYD,EAAQ9C,sBACpBgD,EAAqBC,oBAAUxE,GACrCuE,EAAmBD,GAAW5C,YAAc,EAE5CzB,EAAgBsE,GAChBhC,KA8LuCkC,CAAW3E,IAC1BsD,MAAM,UACNsB,aAAW,MACX9F,UAAU,uBAEV,kBAAC+F,EAAA,EAAD,OAGF,kBAACP,EAAA,EAAD,CACEd,QAAS,kBApMX,SAAAe,GACtB,IAAMC,EAAYD,EAAQ9C,sBACpBgD,EAAqBC,oBAAUxE,GACrCuE,EAAmBD,GAAW5C,WAAa,EAC3C6C,EAAmBD,GAAW7C,eAAiBwC,KAAKC,MAEpDjE,EAAgBsE,GAChBhC,KA6LuCqC,CAAgB9E,IAC/BsD,MAAM,YACNsB,aAAW,MACX9F,UAAU,uBAEV,kBAACiG,EAAA,EAAD,WAQV/D,EAAehD,QACf,oCACE,gDACA,2DAIJ,kBAACgH,EAAA,EAAD,CACEC,kBAAgB,qBAChBC,mBAAiB,2BACjBC,KAAM7E,EACN8E,QAAS,kBAAM7E,GAAwB,KAEvC,yBAAKzB,UAAU,mBACb,yBAAKA,UAAU,yBAAf,aAEA,yBAAKA,UAAU,2BACb,kBAACwF,EAAA,EAAD,CACEd,QAAS,kBAAMjD,GAAwB,IACvC+C,MAAM,UACNsB,aAAW,QACXnB,KAAK,SAEL,kBAAC4B,EAAA,EAAD,QAIJ,+BACI,UAAA3B,GAAmC,OAAlB1D,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBe,OAAQjB,UAA7C,eAA0DwF,UAAW,IAAIzE,KAAI,WAAqC0E,GAArC,uBAAEC,EAAF,KAAkBC,EAAlB,YAC7E,kBAACC,EAAA,EAAD,CAAgBC,IAAKJ,GACnB,kBAACK,EAAA,EAAD,CACEC,WAAY,kBAACC,EAAA,EAAD,MACZC,gBAAc,kBACdC,GAAG,kBAEH,kBAAC3C,EAAA,EAAD,CAAYvE,UAAU,wBAAwBmH,wBAAyB,CAACC,OAAQV,MAElF,kBAACW,EAAA,EAAD,KACE,kBAAC9C,EAAA,EAAD,KACGoC,YAUJ,IAAd/G,GACC,6BACE,6BACE,kBAAC,IAAD,CAAU0H,MAAOnE,YC3X7BoE,EAAcC,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BpG,UAAUqG,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf7G,UAAUqG,cAAcS,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBpB,GACvB,GAA6C,kBAAmBpG,UAAW,CAGzE,GADkB,IAAIyH,IAAIC,sBAAwB7G,OAAOkF,SAASzC,MACpDqE,SAAW9G,OAAOkF,SAAS4B,OAIvC,OAGF9G,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMqF,EAAK,UAAMuB,sBAAN,sBAEP7B,IAgEV,SAAiCM,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQhE,IAAI,gBAEnB,MAApBiE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5CjI,UAAUqG,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7B1F,OAAOkF,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAqB,CAAwBlC,EAAOC,GAI/BpG,UAAUqG,cAAc6B,MAAM3B,MAAK,WACjCQ,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BC,K","file":"static/js/main.3ae86a82.chunk.js","sourcesContent":["export default function getRandomSentence(sentences) {\n    const collectionSize = sentences.length\n    // NOTE temporary solution\n    return sentences[Math.floor(Math.random() * collectionSize)]\n}\n","import React from 'react'\n\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nimport {\n  CssBaseline,\n  BottomNavigation,\n  BottomNavigationAction,\n  Box\n} from \"@material-ui/core\";\nimport {\n  Restore as RestoreIcon,\n  Favorite as FavoriteIcon,\n} from '@material-ui/icons'\n\n\nimport './styles/AppTemplate.css'\n\nconst theme = createMuiTheme({});\n\nconst AppTemplate = ({ children }) => {\n  const [pageIndex, setPageIndex] = React.useState(0)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"app-template\">\n        <Box className=\"app-template__body\">{children && children(pageIndex)}</Box>\n        <footer>\n          <BottomNavigation\n            value={pageIndex}\n            onChange={(_, newValue) => {\n              setPageIndex(newValue);\n            }}\n            showLabels\n            // className={classes.root}\n          >\n            <BottomNavigationAction label=\"HOME\" icon={<RestoreIcon />} />\n            <BottomNavigationAction label=\"HISTORY\" icon={<FavoriteIcon />} />\n          </BottomNavigation>\n        </footer>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default AppTemplate;\n","import React from 'react';\nimport Timeline from \"react-time-line\";\nimport moment from 'moment'\n\nimport {\n  Button,\n  AppBar,\n  Typography,\n  Toolbar,\n  Fab,\n  Chip,\n  Modal,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails\n} from \"@material-ui/core\";\n\nimport {\n  Done as DoneIcon,\n  ThumbDown,\n  ThumbUp,\n  Close as CloseIcon,\n  ExpandMore as ExpandMoreIcon\n} from \"@material-ui/icons\";\n\nimport './App.css';\n\nimport getRandomSentence from './helpers/getRandomSentence'\nimport words from './assets/json/words.json'\nimport wordsDefinitions from './assets/json/words-definitions.json'\n\nimport { difference, get, cloneDeep } from \"lodash\";\nimport AppTemplate from './components/AppTemplate';\n\nconst reviewLogic = [0, 1, 3, 7, 15, 30, 45, 60, 90, 120, 365, 546, 720]\n\nfunction App() {\n  const [randomWord, setRandomWord] = React.useState(undefined)\n  const [randomWordToReview, setRandomWordToReview] = React.useState(undefined)\n  const [studiedWords, setStudiedWords] = React.useState([])\n  const [isReviewMode, setIsReviewMode] = React.useState(false)\n  const [isExampleModalOpened, setIsExampleModalOpened] = React.useState(false)\n  const [isOnline, setIsOnline] = React.useState(!!navigator.onLine)\n  const studiedWordsNames = studiedWords.map(studiedWord => studiedWord.word)\n  const availableWords = difference(words, studiedWordsNames)\n\n  const handleConnection = () => {\n    return setIsOnline(!!navigator.onLine)\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('online', handleConnection);\n    window.addEventListener('offline', handleConnection);\n  }, [])\n\n  const getWordsToReview = () => {\n    return studiedWords\n      .map((studiedWord, index) => ({ ...studiedWord, studiedWordsIndexItem: index }))\n      .filter(studiedWord => {\n        const { firstStudyDate, logicIndex } = studiedWord;\n        const daysToAdd = reviewLogic[logicIndex];\n\n        const dateToReview = moment(firstStudyDate).add(daysToAdd, \"days\");\n\n        const shouldReview = dateToReview.isSameOrBefore(moment(), \"days\");\n\n        return shouldReview;\n      });\n  }\n\n  const wordsToReview = getWordsToReview()\n\n  // ts and text\n  const events = [...studiedWords]\n    .sort((a, b) => b.firstStudyDate - a.firstStudyDate)\n    .map(studiedWord => ({\n      ts: moment(studiedWord.firstStudyDate).toISOString(),\n      text: studiedWord.word\n    }));\n\n  const changeRandomSentence = () => {\n    setRandomWord(getRandomSentence(availableWords))\n  }\n\n  const changeRandomWordToReview = () => {\n    setRandomWordToReview(getRandomSentence(wordsToReview));\n  }\n\n  const checkWordAsStudied = (word) => {\n    setStudiedWords([...studiedWords, {\n      word,\n      logicIndex: 0,\n      firstStudyDate: Date.now(),\n    }])\n    setRandomWord(undefined)\n  }\n\n  React.useEffect(() => {\n    const studiedWordsKey = 'english-challenges::studiedWords'\n\n    if (studiedWords.length > 0) {\n      return localStorage.setItem(studiedWordsKey, JSON.stringify(studiedWords))\n    }\n\n    const hasStudiedInLocalStorage = !!localStorage.getItem(studiedWordsKey)\n\n    if (hasStudiedInLocalStorage) {\n      return setStudiedWords(JSON.parse(localStorage.getItem(studiedWordsKey)))\n    }\n  }, [studiedWords])\n\n  React.useEffect(() => {\n    if (!wordsToReview.length) {\n      setIsReviewMode(false)\n      setRandomWordToReview(undefined);\n    } else if (isReviewMode) {\n      changeRandomWordToReview()\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [wordsToReview.length]);\n\n  const reviewWord = (wordObj) => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex += 1;\n\n    setStudiedWords(newStudiedWordsObj);\n    changeRandomWordToReview();\n  }\n\n  const resetReviewWord = wordObj => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex = 0;\n    newStudiedWordsObj[wordIndex].firstStudyDate = Date.now();\n\n    setStudiedWords(newStudiedWordsObj);\n    changeRandomWordToReview();\n  };\n\n  return (\n    <AppTemplate>\n      {(pageIndex) => {\n        return (\n          <div className=\"app__body\">\n            <AppBar position=\"fixed\">\n              <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" color=\"inherit\">\n                  {pageIndex === 0 ? \"Home\" : \"History\"}\n                </Typography>\n              </Toolbar>\n            </AppBar>\n            <Toolbar />\n            {pageIndex === 0 && (\n              <div className=\"app__home-container\">\n                {!!availableWords.length && !isReviewMode && (\n                  <>\n                    <div className=\"app__main-actions-container\">\n                      <Button\n                        onClick={changeRandomSentence}\n                        color=\"primary\"\n                        variant=\"contained\"\n                        size=\"large\"\n                      >\n                        Get Random Word\n                      </Button>\n\n                      {!!wordsToReview.length && (\n                        <Button\n                          onClick={() => {\n                            setIsReviewMode(true);\n                            changeRandomWordToReview();\n                          }}\n                          color=\"secondary\"\n                          variant=\"contained\"\n                          size=\"large\"\n                        >\n                          Review ({wordsToReview.length})\n                        </Button>\n                      )}\n                    </div>\n\n                    <h1 className=\"app__current-word\">{randomWord}</h1>\n\n                    <div>\n                      <div className=\"app__word-types\">\n                        {(wordsDefinitions[randomWord]?.wordTypes || []).map(type => (\n                          <Chip label={type} variant=\"outlined\" />\n                        ))}\n                      </div>\n                    </div>\n\n                    {randomWord && (\n                      <div className=\"app__work-actions\">\n                        <div className=\"app__services-links\">\n                          <Button\n                            className=\"link\"\n                            onClick={() => setIsExampleModalOpened(true)}\n                            variant=\"contained\"\n                          >\n                            See Examples\n                          </Button>\n\n                          {isOnline && (\n                            <>\n                              <Button\n                                className=\"link\"\n                                href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${randomWord}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                variant=\"contained\"\n                              >\n                                See google translate\n                              </Button>\n\n                              <Button\n                                className=\"link\"\n                                href={`https://context.reverso.net/traducao/ingles-portugues/${randomWord}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                variant=\"contained\"\n                              >\n                                See Reverso definitions\n                              </Button>\n\n                              <Button\n                                className=\"link\"\n                                href={`https://www.wordreference.com/enpt/${randomWord}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                variant=\"contained\"\n                              >\n                                See Word Reference definitions\n                              </Button>\n                            </>\n                          )}\n                        </div>\n\n                        <Button\n                          variant=\"contained\"\n                          color=\"primary\"\n                          size=\"large\"\n                          startIcon={<DoneIcon />}\n                          onClick={() => checkWordAsStudied(randomWord)}\n                        >\n                          Mark as studied\n                        </Button>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                {!!wordsToReview.length && isReviewMode && (\n                  <div className=\"main-column\">\n                    <h1 className=\"app__current-word\">\n                      {get(randomWordToReview, \"word\")}\n                    </h1>\n\n                    {get(randomWordToReview, \"word\") && (\n                      <>\n                        <div className=\"app__services-links\">\n                          <div className=\"app__services-links\">\n                            <Button\n                              className=\"link\"\n                              onClick={() => setIsExampleModalOpened(true)}\n                              variant=\"contained\"\n                            >\n                              See Examples\n                            </Button>\n\n                            {isOnline && (\n                              <>\n                                <Button\n                                  className=\"link\"\n                                  href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${get(\n                                    randomWordToReview,\n                                    \"word\"\n                                  )}`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  variant=\"contained\"\n                                >\n                                  See google translate\n                                </Button>\n\n                                <Button\n                                  className=\"link\"\n                                  href={`https://context.reverso.net/traducao/ingles-portugues/${get(\n                                    randomWordToReview,\n                                    \"word\"\n                                  )}`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  variant=\"contained\"\n                                >\n                                  See Reverso definitions\n                                </Button>\n\n                                <Button\n                                  className=\"link\"\n                                  href={`https://www.wordreference.com/enpt/${get(\n                                    randomWordToReview,\n                                    \"word\"\n                                  )}`}\n                                  target=\"_blank\"\n                                  rel=\"noopener noreferrer\"\n                                  variant=\"contained\"\n                                >\n                                  See Word Reference definitions\n                                </Button>\n                              </>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"app__review-buttons-container\">\n                          <Fab\n                            onClick={() => reviewWord(randomWordToReview)}\n                            color=\"primary\"\n                            aria-label=\"add\"\n                            className=\"app__review-buttons\"\n                          >\n                            <ThumbUp />\n                          </Fab>\n\n                          <Fab\n                            onClick={() => resetReviewWord(randomWordToReview)}\n                            color=\"secondary\"\n                            aria-label=\"add\"\n                            className=\"app__review-buttons\"\n                          >\n                            <ThumbDown />\n                          </Fab>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                )}\n\n                {!availableWords.length && (\n                  <>\n                    <h1>Congratulations!</h1>\n                    <h2>You finished the challenge</h2>\n                  </>\n                )}\n\n                <Modal\n                  aria-labelledby=\"simple-modal-title\"\n                  aria-describedby=\"simple-modal-description\"\n                  open={isExampleModalOpened}\n                  onClose={() => setIsExampleModalOpened(false)}\n                >\n                  <div className=\"app__modal-body\">\n                    <div className=\"app__modal-body-title\">Examples:</div>\n\n                    <div className=\"app__modal-close-button\">\n                      <Fab\n                        onClick={() => setIsExampleModalOpened(false)}\n                        color=\"primary\"\n                        aria-label=\"close\"\n                        size=\"small\"\n                      >\n                        <CloseIcon />\n                      </Fab>\n                    </div>\n\n                    <div>\n                      {(wordsDefinitions[randomWordToReview?.word || randomWord]?.phrases || []).map(([originalPhrase, translatedPhrase], i) => (\n                        <ExpansionPanel key={i}>\n                          <ExpansionPanelSummary\n                            expandIcon={<ExpandMoreIcon />}\n                            aria-controls=\"panel1a-content\"\n                            id=\"panel1a-header\"\n                          >\n                            <Typography className=\"app__sentence-example\" dangerouslySetInnerHTML={{__html: originalPhrase}} />\n                          </ExpansionPanelSummary>\n                          <ExpansionPanelDetails>\n                            <Typography>\n                              {translatedPhrase}\n                            </Typography>\n                          </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                      ))}\n                    </div>\n                  </div>\n                </Modal>\n              </div>\n            )}\n            {pageIndex === 1 && (\n              <div>\n                <div>\n                  <Timeline items={events} />\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      }}\n    </AppTemplate>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './components/AppTemplate';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}