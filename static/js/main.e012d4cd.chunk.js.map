{"version":3,"sources":["App.js","helpers/getRandomSentence.js","serviceWorker.js","index.js"],"names":["App","React","useState","undefined","randomWord","setRandomSentence","studiedWords","setStudiedWords","availableWords","difference","words","useEffect","studiedWordsKey","length","localStorage","setItem","JSON","stringify","getItem","parse","className","onClick","sentences","collectionSize","Math","floor","random","getRandomSentence","href","target","rel","word","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"843BA2GeA,MAnGf,WAAgB,IAAD,EAC2BC,IAAMC,cAASC,GAD1C,mBACNC,EADM,KACMC,EADN,OAE2BJ,IAAMC,SAAS,IAF1C,mBAENI,EAFM,KAEQC,EAFR,KAGPC,EAAiBC,qBAAWC,EAAOJ,GAyBzC,OAdAL,IAAMU,WAAU,WACd,IAAMC,EAAkB,mCAExB,OAAIN,EAAaO,OAAS,EACjBC,aAAaC,QAAQH,EAAiBI,KAAKC,UAAUX,MAG3BQ,aAAaI,QAAQN,GAG/CL,EAAgBS,KAAKG,MAAML,aAAaI,QAAQN,UADzD,IAGC,CAACN,IAGF,yBAAKc,UAAU,OACb,yBAAKA,UAAU,iBACVZ,EAAeK,QAChB,oCACE,4BAAQQ,QA5BW,WAC3BhB,ECdW,SAA2BiB,GACtC,IAAMC,EAAiBD,EAAUT,OAEjC,OAAOS,EAAUE,KAAKC,MAAMD,KAAKE,SAAWH,IDW1BI,CAAkBnB,KA2BWY,UAAU,eAAjD,mBAIA,4BAAKhB,GAEJA,GACC,oCACE,uBACEgB,UAAU,OACVQ,KAAI,gFAA2ExB,GAC/EyB,OAAO,SACPC,IAAI,uBAJN,wBASA,uBACEV,UAAU,OACVQ,KAAI,gEAA2DxB,GAC/DyB,OAAO,SACPC,IAAI,uBAJN,2BASA,uBACEV,UAAU,OACVQ,KAAI,6CAAwCxB,GAC5CyB,OAAO,SACPC,IAAI,uBAJN,kCASA,4BAAQT,QAAS,kBA3DHU,EA2D4B3B,EA1DtDG,EAAgB,GAAD,mBAAKD,GAAL,CAAmByB,UAClC1B,OAAkBF,GAFO,IAAC4B,IA2Dd,sBAQNvB,EAAeK,QACf,oCACE,gDACA,4DAKN,yBAAKO,UAAU,kBACb,wBAAIA,UAAU,iBAAd,WACU,mCAASd,EAAaO,OAAtB,MAGV,6BACGP,EAAa0B,KAAI,SAAAD,GAAI,OACpB,uBAAGE,IAAKF,GAAOA,UEvFPG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e012d4cd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nimport getRandomSentence from './helpers/getRandomSentence'\nimport words from './assets/json/words.json'\n\nimport { difference } from 'lodash'\n\nfunction App() {\n  const [randomWord, setRandomSentence] = React.useState(undefined)\n  const [studiedWords, setStudiedWords] = React.useState([])\n  const availableWords = difference(words, studiedWords)\n\n  const changeRandomSentence = () => {\n    setRandomSentence(getRandomSentence(availableWords))\n  }\n\n  const checkWordAsStudied = (word) => {\n    setStudiedWords([...studiedWords, word])\n    setRandomSentence(undefined)\n  }\n\n  React.useEffect(() => {\n    const studiedWordsKey = 'english-challenges::studiedWords'\n\n    if (studiedWords.length > 0) {\n      return localStorage.setItem(studiedWordsKey, JSON.stringify(studiedWords))\n    }\n\n    const hasStudiedInLocalStorage = !!localStorage.getItem(studiedWordsKey)\n\n    if (hasStudiedInLocalStorage) {\n      return setStudiedWords(JSON.parse(localStorage.getItem(studiedWordsKey)))\n    }\n  }, [studiedWords])\n\n  return (\n    <div className=\"app\">\n      <div className=\"main-column\">\n        {!!availableWords.length && (\n          <>\n            <button onClick={changeRandomSentence} className=\"btn-default\">\n              Get Random Word\n            </button>\n\n            <h1>{randomWord}</h1>\n\n            {randomWord && (\n              <>\n                <a\n                  className=\"link\"\n                  href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See google translate\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://context.reverso.net/traducao/ingles-portugues/${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Reverso definitions\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://www.wordreference.com/enpt/${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Word Reference definitions\n                </a>\n\n                <button onClick={() => checkWordAsStudied(randomWord)}>\n                  Mark as studied\n                </button>\n              </>\n            )}\n          </>\n        )}\n\n        {!availableWords.length && (\n          <>\n            <h1>Congratulations!</h1>\n            <h2>You finished the challenge</h2>\n          </>\n        )}\n      </div>\n\n      <div className=\"history-column\">\n        <h1 className=\"history-title\">\n          History <small>({studiedWords.length})</small>\n        </h1>\n\n        <div>\n          {studiedWords.map(word => (\n            <p key={word}>{word}</p>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export default function getRandomSentence(sentences) {\n    const collectionSize = sentences.length\n    // NOTE temporary solution\n    return sentences[Math.floor(Math.random() * collectionSize)]\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}