{"version":3,"sources":["helpers/getRandomSentence.js","App.js","serviceWorker.js","index.js"],"names":["getRandomSentence","sentences","collectionSize","length","Math","floor","random","reviewLogic","App","React","useState","undefined","randomWord","setRandomWord","randomWordToReview","setRandomWordToReview","studiedWords","setStudiedWords","isReviewMode","setIsReviewMode","studiedWordsNames","map","studiedWord","word","availableWords","difference","words","wordsToReview","index","studiedWordsIndexItem","filter","firstStudyDate","logicIndex","daysToAdd","moment","add","isSameOrBefore","events","ts","toISOString","text","changeRandomWordToReview","useEffect","studiedWordsKey","localStorage","setItem","JSON","stringify","getItem","parse","className","onClick","href","target","rel","Date","now","get","wordObj","wordIndex","newStudiedWordsObj","cloneDeep","reviewWord","resetReviewWord","items","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9734d93d.chunk.js","sourcesContent":["export default function getRandomSentence(sentences) {\n    const collectionSize = sentences.length\n    // NOTE temporary solution\n    return sentences[Math.floor(Math.random() * collectionSize)]\n}\n","import React from 'react';\nimport Timeline from \"react-time-line\";\nimport moment from 'moment'\n\nimport './App.css';\n\nimport getRandomSentence from './helpers/getRandomSentence'\nimport words from './assets/json/words.json'\n\nimport { difference, get, cloneDeep } from \"lodash\";\n\nconst reviewLogic = [0, 1, 3, 7, 15, 30, 45, 60, 90, 120, 365, 546, 720]\n\nfunction App() {\n  const [randomWord, setRandomWord] = React.useState(undefined)\n  const [randomWordToReview, setRandomWordToReview] = React.useState(undefined)\n  const [studiedWords, setStudiedWords] = React.useState([])\n  const [isReviewMode, setIsReviewMode] = React.useState(false)\n  const studiedWordsNames = studiedWords.map(studiedWord => studiedWord.word)\n  const availableWords = difference(words, studiedWordsNames)\n\n  const getWordsToReview = () => {\n    // Filtrar as palavras estudadas\n    // Comparar a data de primeiro estudo usando a l처gica de revis찾o com a data atual\n    // - Data de primeiro estudo + l처gica de revis찾o (em dias) tem que ser menor que a data atual\n\n    // Retornar todas as palavras que respeitem essa regra\n\n    return studiedWords\n      .map((studiedWord, index) => ({ ...studiedWord, studiedWordsIndexItem: index }))\n      .filter(studiedWord => {\n        const { firstStudyDate, logicIndex } = studiedWord;\n        const daysToAdd = reviewLogic[logicIndex];\n\n        const dateToReview = moment(firstStudyDate).add(daysToAdd, \"days\");\n\n        const shouldReview = dateToReview.isSameOrBefore(moment(), \"days\");\n\n        return shouldReview;\n      });\n  }\n\n  const wordsToReview = getWordsToReview()\n\n  // ts and text\n  const events = studiedWords.map(studiedWord => ({\n    ts: moment(studiedWord.firstStudyDate).toISOString(),\n    text: studiedWord.word\n  }));\n\n  const changeRandomSentence = () => {\n    setRandomWord(getRandomSentence(availableWords))\n  }\n  \n  const changeRandomWordToReview = () => {\n    setRandomWordToReview(getRandomSentence(wordsToReview));\n  }\n\n  const checkWordAsStudied = (word) => {\n    setStudiedWords([...studiedWords, {\n      word,\n      logicIndex: 0,\n      firstStudyDate: Date.now(),\n    }])\n    setRandomWord(undefined)\n  }\n\n  React.useEffect(() => {\n    const studiedWordsKey = 'english-challenges::studiedWords'\n\n    if (studiedWords.length > 0) {\n      return localStorage.setItem(studiedWordsKey, JSON.stringify(studiedWords))\n    }\n\n    const hasStudiedInLocalStorage = !!localStorage.getItem(studiedWordsKey)\n\n    if (hasStudiedInLocalStorage) {\n      return setStudiedWords(JSON.parse(localStorage.getItem(studiedWordsKey)))\n    }\n  }, [studiedWords])\n  \n  React.useEffect(() => {\n    if (!wordsToReview.length) {\n      setIsReviewMode(false)\n    } else {\n      changeRandomWordToReview()\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [wordsToReview.length]);\n\n  const reviewWord = (wordObj) => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex += 1;\n\n    setStudiedWords(newStudiedWordsObj);\n  }\n  \n  const resetReviewWord = wordObj => {\n    const wordIndex = wordObj.studiedWordsIndexItem;\n    const newStudiedWordsObj = cloneDeep(studiedWords);\n    newStudiedWordsObj[wordIndex].logicIndex = 0;\n\n    setStudiedWords(newStudiedWordsObj);\n    changeRandomWordToReview();\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"main-column\">\n        {!!availableWords.length && !isReviewMode && (\n          <>\n            {!!wordsToReview.length && (\n              <button\n                onClick={() => {\n                  setIsReviewMode(true);\n                  changeRandomWordToReview();\n                }}\n                className=\"btn-default\"\n              >\n                Review ({wordsToReview.length})\n              </button>\n            )}\n\n            <button onClick={changeRandomSentence} className=\"btn-default\">\n              Get Random Word\n            </button>\n\n            <h1>{randomWord}</h1>\n\n            {randomWord && (\n              <>\n                <a\n                  className=\"link\"\n                  href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See google translate\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://context.reverso.net/traducao/ingles-portugues/${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Reverso definitions\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://www.wordreference.com/enpt/${randomWord}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Word Reference definitions\n                </a>\n\n                <button onClick={() => checkWordAsStudied(randomWord)}>\n                  Mark as studied\n                </button>\n              </>\n            )}\n          </>\n        )}\n\n        {!!wordsToReview.length && isReviewMode && (\n          <div className=\"main-column\">\n            <h1>{get(randomWordToReview, \"word\")}</h1>\n\n            {get(randomWordToReview, \"word\") && (\n              <>\n                <a\n                  className=\"link\"\n                  href={`https://translate.google.com/#view=home&op=translate&sl=en&tl=pt&text=${get(\n                    randomWordToReview,\n                    \"word\"\n                  )}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See google translate\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://context.reverso.net/traducao/ingles-portugues/${get(\n                    randomWordToReview,\n                    \"word\"\n                  )}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Reverso definitions\n                </a>\n\n                <a\n                  className=\"link\"\n                  href={`https://www.wordreference.com/enpt/${get(\n                    randomWordToReview,\n                    \"word\"\n                  )}`}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  See Word Reference definitions\n                </a>\n\n                <div>\n                  <button onClick={() => reviewWord(randomWordToReview)}>\n                    I Know this Word\n                  </button>\n\n                  <button onClick={() => resetReviewWord(randomWordToReview)}>\n                    I Don't this Word\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        )}\n\n        {!availableWords.length && (\n          <>\n            <h1>Congratulations!</h1>\n            <h2>You finished the challenge</h2>\n          </>\n        )}\n      </div>\n\n      <div className=\"history-column\">\n        <h1 className=\"history-title\">\n          History <small>({studiedWords.length})</small>\n        </h1>\n\n        <div>\n          <Timeline items={events} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}